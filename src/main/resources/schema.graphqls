schema {
    query: Query
    mutation: Mutation
}

type Query{
    Complaint(id: ID): Complaint
    allComplaints(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: ComplaintFilter): [Complaint]
    _allComplaintsMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: ComplaintFilter): Metadata
    ComplaintType(id: ID): ComplaintType
    allComplaintTypes(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: ComplaintTypeFilter): [ComplaintType]
    _allComplaintTypesMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: ComplaintTypeFilter): Metadata
    Role(id: ID): Role
    allRoles(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: RoleFilter): [Role]
    _allRolesMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: RoleFilter): Metadata
    Product(id: ID): Product
    allProducts(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: ProductFilter): [Product]
    _allProductsMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: ProductFilter): Metadata
    TaxCategory(id: ID): TaxCategory
    allTaxCategories(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: TaxCategoryFilter): [TaxCategory]
    _allTaxCategoriesMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: TaxCategoryFilter): Metadata
    User(id:ID): User
    allUsers(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: UserFilter): [User]
    _allUsersMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: UserFilter): Metadata
    Order(id:ID): Order
    allOrders(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: OrderFilter): [Order]
    _allOrdersMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: OrderFilter): Metadata
    Category(id:ID): Category
    allCategories(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: CategoryFilter): [Category]
    _allCategoriesMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: CategoryFilter): Metadata
    Subcategory(id: ID): Subcategory
    allSubcategories(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: SubcategoryFilter): [Subcategory]
    _allSubcategoriesMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: SubcategoryFilter): Metadata
    Supplier(id:ID): Supplier
    allSuppliers(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: SupplierFilter): [Supplier]
    _allSuppliersMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: SupplierFilter): Metadata
    ProductSupplier(id: ID): ProductSupplier
    allProductSuppliers(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: ProductSupplierFilter): [ProductSupplier]
    _allProductSuppliersMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: ProductSupplierFilter): Metadata
    Opinion(id:ID): Opinion
    allOpinions(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: OpinionFilter): [Opinion]
    _allOpiniosnMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: OpinionFilter): Metadata
    Warehouse(id:ID): Warehouse
    allWarehouses(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: WarehouseFilter): [Warehouse]
    _allWarehousesMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: WarehouseFilter): Metadata
    ProductWarehouse(id: ID): ProductWarehouse
    allProductWarehouses(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: ProductWarehouseFilter): [ProductWarehouse]
    _allProductWarehousesMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: ProductWarehouseFilter): Metadata
    Visited(id: ID): Visited
    allVisited(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: WarehouseFilter): [Visited]
    _allVisitedMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: WarehouseFilter): Metadata
    DeliveryAddress(id:ID): DeliveryAddress
    allDeliveryAddresses(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: DeliveryAddressFilter): [DeliveryAddress]
    _allDeliveryAddressesMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: DeliveryAddressFilter): Metadata
    ShipmentMethod(id:ID): ShipmentMethod
    allShipmentMethods(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: ShipmentMethodFilter): [ShipmentMethod]
    _allShipmentMethodsMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: ShipmentMethodFilter): Metadata
    getUserWishlist(id:ID!): [Product!]!
}

type Metadata{
    count: Int!
}

type Complaint {
    id: ID!,
    complaintType: ComplaintType!
    user: User!
    product: Product!
    order: Order!
    date: String!
    status: String!
}

input ComplaintFilter {
    q: String
    id: ID
    date: String
    ids: [ID!]
    productID: ID
    complaintTypeID: ID
    orderID: ID
    userID: ID
    status: String
}

type ComplaintType {
    id: ID!
    name: String!
}

input ComplaintTypeFilter {
    q: String
    id: ID
    name: String
    ids: [ID!]
}

type Role {
    id: ID!
    name: String!
    users: [User!]!
}

input RoleFilter {
    q: String
    id: ID
    name: String
    ids: [ID!]
}

type Product {
    id: ID!
    name: String!
    price: Int!
    discountPrice: Int!
    noAvailable: Int!
    description: String!
    imagePath: String!
    taxCategory: TaxCategory!
    warehouses: [ProductWarehouse!]!
    suppliers: [ProductSupplier!]!
    categories: [Category!]!
    subcategories: [Subcategory!]!
    orders: [Order!]!
    complaints: [Complaint!]!
    opinions: [Opinion!]!
    wishlist: [User!]!
    visited: [Visited!]!
}

input ProductFilter {
    q: String
    id: ID
    name: String
    price: Int
    price_lt: Int
    price_lte: Int
    price_gt: Int
    price_gte: Int
    discountPrice: Int
    discountPrice_lt: Int
    discountPrice_lte: Int
    discountPrice_gt: Int
    discountPrice_gte: Int
    noAvailable: Int
    noAvailable_lt: Int
    noAvailable_lte: Int
    noAvailable_gt: Int
    noAvailable_gte: Int
    description: String
    imagePath: String
    categoryID: ID
    subcategoryID: ID
    ids: [ID!]
    taxCategoryID: ID
}

type TaxCategory {
    id: ID!
    taxRate: Int!
    name: String!
}

input TaxCategoryFilter {
    q: String
    id: ID
    taxRate: Int
    taxRate_lt: Int
    taxRate_lte: Int
    taxRate_gt: Int
    taxRate_gte: Int
    name: String
    ids: [ID!]
}

type ProductWarehouse{
    id: ID!,
    product: Product!
    warehouse: Warehouse!
    quantity: Int!
}

input ProductWarehouseFilter {
    q: String
    quantity: Int
    quantity_lt: Int
    quantity_lte: Int
    quantity_gt: Int
    quantity_gte: Int
    ids: [ID!]
}

type Warehouse{
    id: ID!
    name: String!
    address: String!
    products: [ProductWarehouse!]!
}

input WarehouseFilter{
    q: String
    id: ID
    name: String
    address: String
    ids: [ID!]
}

type Supplier{
    id: ID!
    name: String!
    telephone: String!
    products: [ProductSupplier!]!
}

input SupplierFilter{
    q: String
    id: ID
    name: String
    telephone: String
    ids: [ID!]
}

type ProductSupplier{
    id: ID!,
    product: Product!
    supplier: Supplier!
    price: Int!
}

input ProductSupplierFilter{
    q: String
    price: Int
    price_lt: Int
    price_lte: Int
    price_gt: Int
    price_gte: Int
    ids: [ID!]
}

type Category{
    id: ID!
    name: String!
    products: [Product!]!
    subcategories: [Subcategory!]!
}

input CategoryFilter{
    q: String
    id: ID
    name: String
    ids: [ID!]
}

type Subcategory{
    id: ID!
    name: String!
    products: [Product!]!
    category: Category
}

input SubcategoryFilter{
    q: String
    id: ID
    name: String
    ids: [ID!]
    categoryID: ID
}

type Visited{
    id: ID!,
    date: String!
    product: Product!
    user: User!
}

input VisitedFilter{
    q: String
    date: String
    ids: [ID!]
}

type User{
    id: ID!
    login: String!
    email: String!
    name: String!
    surname: String!
    address: String!
    birthDate: String!
    telephone: String!
    role: Role!
    visited: [Visited!]!
    wishlist: [Product!]!
    opinions: [Opinion!]!
    complaints: [Complaint!]!
    orders: [Order!]!
    deliveryAddresses: [DeliveryAddress!]!
}

input UserFilter{
    q: String
    id: ID
    login: String
    email: String
    name: String
    surname: String
    address: String
    birthDate: String
    telephone: String
    ids: [ID!]
    roleID: ID
}

type DeliveryAddress {
    id: ID!
    name: String!
    surname: String!
    city: String!
    street: String!
    buildingNumber: String!
    postCode: String!
    user: User!
    orders: [Order!]!
}

input DeliveryAddressFilter {
    q: String
    id: ID
    name: String
    surname: String
    city: String
    street: String
    buildingNumber: String
    postCode: String
    ids: [ID!]
    userID: ID
}

type Opinion {
    id: ID!
    mark: Int!
    text: String!
    user: User!
    product: Product!
    date: String!
}

input OpinionFilter {
    q: String
    mark: Int
    mark_lt: Int
    mark_lte: Int
    mark_gt: Int
    mark_gte: Int
    text: String
    date: String
    ids: [ID!]
}

type Order {
    id: ID!
    products: [Product!]!
    deliveryAddress: DeliveryAddress!
    user: User!
    date: String!
    complaints: [Complaint!]!
    shipmentMethod: ShipmentMethod!
    price: Int!
    status: String!
}

input OrderFilter {
    q: String
    id: ID
    date: String
    ids: [ID!]
    deliveryAddressID: ID
    shipmentMethodID: ID
    productID: ID
    userID: ID
    status: String
}

type ShipmentMethod {
    id: ID!
    name: String!
    price: Int!
    freeThreshold: Int!
    orders: [Order!]!
}

input ShipmentMethodFilter {
    q: String
    id: ID
    name: String
    price: Int
    price_lt: Int
    price_lte: Int
    price_gt: Int
    price_gte: Int
    freeThreshold: Int
    freeThreshold_lt: Int
    freeThreshold_lte: Int
    freeThreshold_gt: Int
    freeThreshold_gte: Int
    ids: [ID!]
}

type Mutation {
    login(login: String!, password: String!): SigninPayload!
    createUser(input: CreateUserInput): User!
    updateUser(input: UpdateUserInput): User!
    deleteUser(id: ID): User!
    createProduct(input: CreateProductInput): Product!
    updateProduct(input: UpdateProductInput): Product!
    deleteProduct(id: ID): Product!
    createOrder(input: CreateOrderInput): Order!
    updateOrder(input: UpdateOrderInput): Order!
    deleteOrder(id: ID): Order!
    createOpinion(input: CreateOpinionInput): Opinion!
    updateOpinion(input: UpdateOpinionInput): Opinion!
    deleteOpinion(id: ID): Opinion!
    createCategory(input: CreateCategoryInput): Category!
    updateCategory(input: UpdateCategoryInput): Category!
    deleteCategory(id: ID): Category!
    createSubcategory(input: CreateSubcategoryInput): Subcategory!
    updateSubcategory(input: UpdateSubcategoryInput): Subcategory!
    deleteSubcategory(id: ID): Subcategory!
    createComplaint(input: CreateComplaintInput): Complaint!
    updateComplaint(input: UpdateComplaintInput): Complaint!
    deleteComplaint(id: ID): Complaint!
    createComplaintType(input: CreateComplaintTypeInput): ComplaintType!
    updateComplaintType(input: UpdateComplaintTypeInput): ComplaintType!
    deleteComplainttype(id: ID): ComplaintType!
    createDeliveryAddress(input: CreateDeliveryAddressInput): DeliveryAddress!
    updateDeliveryAddress(input: UpdateDeliveryAddressInput): DeliveryAddress!
    deleteDeliveryAddress(id: ID): DeliveryAddress!
    createRole(input: CreateRoleInput): Role!
    updateRole(input: UpdateRoleInput): Role!
    deleteRole(id: ID): Role!
    createShipmentMethod(input: CreateShipmentMethodInput): ShipmentMethod!
    updateShipmentMethod(input: UpdateShipmentMethodInput): ShipmentMethod!
    deleteShipmentMethod(id: ID): ShipmentMethod!
    createTaxCategory(input: CreateTaxCategoryInput): TaxCategory!
    updateTaxCategory(input: UpdateTaxCategoryInput): TaxCategory!
    deleteTaxCategory(id: ID): TaxCategory!
    createVisited(input: CreateVisitedInput): Visited!
    updateVisited(input: UpdateVisitedInput): Visited!
    deleteVisited(id: ID): Visited!
    createSupplier(input: CreateSupplierInput): Supplier!
    updateSupplier(input: UpdateSupplierInput): Supplier!
    deleteSupplier(id: ID): Supplier!
    createProductSupplier(input: CreateProductSupplierInput): ProductSupplier!
    updateProductSupplier(input: UpdateProductSupplierInput): ProductSupplier!
    deleteProductSupplier(id: ID): ProductSupplier!
    createWarehouse(input: CreateWarehouseInput): Warehouse!
    updateWarehouse(input: UpdateWarehouseInput): Warehouse!
    deleteWarehouse(id: ID): Warehouse!
    createProductWarehouse(input: CreateProductWarehouseInput): ProductWarehouse!
    updateProductWarehouse(input: UpdateProductWarehouseInput): ProductWarehouse!
    deleteProductWarehouse(id: ID): ProductWarehouse!
    deleteProductFromWishlist(user_id: ID!, product_id: ID!): User!
}

type SigninPayload {
    token: String
}

input CreateUserInput {
    login: String!
    password: String!
    email: String!
    name: String!
    surname: String!
    address: String!
    birthDate: String!
    telephone: String!
    roleID: ID!
}

input UpdateUserInput {
    id: ID!
    login: String
    password: String
    email: String
    name: String
    surname: String
    address: String
    birthDate: String
    telephone: String
    roleID: ID
    wishlistProductIDs: [ID!]
}

input CreateProductInput {
    name: String!
    price: Int!
    discountPrice: Int!
    noAvailable: Int!
    description: String!
    imagePath: String!
    taxCategoryID: ID!
    categoryIDs: [ID!]!
    subcategoryIDs: [ID!]!
}

input UpdateProductInput {
    id: ID!
    name: String
    price: Int
    discountPrice: Int
    noAvailable: Int
    description: String
    imagePath: String
    taxCategoryID: ID
    categoryIDs: [ID!]
    subcategoryIDs: [ID!]
}

input CreateOrderInput {
    deliveryAddressID: ID!
    shipmentMethodID: ID!
    userID: ID!
    productIDs: [ID!]!
    status: String
}

input UpdateOrderInput {
    id: ID!
    date: String
    deliveryAddressID: ID
    shipmentMethodID: ID
    userID: ID
    productIDs: [ID!]
    status: String
}

input CreateOpinionInput {
    mark: Int!
    text: String!
    date: String!
    productID: ID!
    userID: ID!
}

input UpdateOpinionInput {
    id: ID!
    mark: Int
    text: String
    date: String
    productID: ID
    userID: ID
}

input CreateCategoryInput {
    name: String!
}

input UpdateCategoryInput {
    id: ID!
    name: String
}

input CreateSubcategoryInput {
    name: String!
    categoryID: ID!
}

input UpdateSubcategoryInput {
    id: ID!
    name: String
    categoryID: ID
}

input CreateComplaintInput {
    date: String!
    complaintTypeID: ID!
    orderID: ID!
    productID: ID!
    userID: ID!
}

input UpdateComplaintInput {
    id: ID!
    date: String
    complaintTypeID: ID
    orderID: ID
    productID: ID
    userID: ID
}

input CreateComplaintTypeInput {
    name: String!
    status: String
}

input UpdateComplaintTypeInput {
    id: ID!
    name: String
    status: String
}

input CreateDeliveryAddressInput {
    name: String!
    surname: String!
    city: String!
    street: String!
    buildingNumber: String!
    postCode: String!
    userID: ID!
}

input UpdateDeliveryAddressInput {
    id: ID!
    name: String
    surname: String
    city: String
    street: String
    buildingNumber: String
    postCode: String
    userID: ID
}

input CreateRoleInput {
    name: String!
}

input UpdateRoleInput {
    id: ID!
    name: String
}

input CreateShipmentMethodInput {
    name: String!
    price: Int!
    freeThreshold: Int!
}

input UpdateShipmentMethodInput {
    id: ID!
    name: String
    price: Int
    freeThreshold: Int
}

input CreateTaxCategoryInput {
    taxRate: Int!
    name: String!
}

input UpdateTaxCategoryInput {
    id: ID!
    taxRate: Int
    name: String
}

input CreateVisitedInput{
    productID: ID!
    userID: ID!
}

input UpdateVisitedInput{
    id: ID!
    date: String
    productID: ID
    userID: ID
}

input CreateSupplierInput {
    name: String!
    telephone: String!
}

input UpdateSupplierInput {
    id: ID!
    name: String
    telephone: String
}

input CreateProductSupplierInput {
    price: Int!
    productID: ID!
    supplierID: ID!
}

input UpdateProductSupplierInput {
    id: ID!
    price: Int
    productID: ID
    supplierID: ID
}

input CreateWarehouseInput{
    name: String!
    address: String!
}

input UpdateWarehouseInput{
    id: ID!
    name: String
    address: String
}

input CreateProductWarehouseInput{
    quantity: Int!
    productID: ID!
    warehouseID: ID!
}

input UpdateProductWarehouseInput{
    id: ID!
    quantity: Int
    productID: ID
    warehouseID: ID
}